- name: Deploy Almonium BE Application (Blue/Green)
  hosts: "{{ target_host_group }}"
  gather_facts: false
  vars:
    infra_root: "/home/almonium/infra"
    project_name_base: "almonium-be"
    APP_INTERNAL_PORT: "9998"

  tasks:
    - name: Read current deployment color for the environment
      ansible.builtin.slurp:
        src: "{{ infra_root }}/.next_color_{{ DEPLOY_ENVIRONMENT }}"
      register: color_file_content
      failed_when: false

    - name: Determine the color to use from file, defaulting to 'blue'
      ansible.builtin.set_fact:
        # If the file exists and has content, use it. Otherwise, the next deployment will be blue.
        _color_from_file: >-
          {{ color_file_content.content | b64decode
             if color_file_content.content is defined and color_file_content.content != ""
             else 'blue' }}

    - name: Set target and previous deployment slots
      ansible.builtin.set_fact:
        DEPLOY_SLOT: "{{ 'green' if _color_from_file == 'blue' else 'blue' }}"
        PREVIOUS_SLOT: "{{ 'blue' if _color_from_file == 'blue' else 'green' }}"

    - name: Set dynamic configuration for the deployment
      ansible.builtin.set_fact:
        LOCAL_HEALTHCHECK_PORT: >-
          {% if DEPLOY_ENVIRONMENT == 'staging' %}
            {{ {'blue': '9978', 'green': '9979'}[DEPLOY_SLOT] }}
          {% else %}
            {{ {'blue': '9988', 'green': '9989'}[DEPLOY_SLOT] }}
          {% endif %}
        DOCKER_COMPOSE_PROJECT_NAME: "{{ project_name_base }}_{{ DEPLOY_ENVIRONMENT }}"

    - name: Log in to GitHub Container Registry (GHCR)
      community.docker.docker_login:
        registry: ghcr.io
        username: "{{ DEPLOY_GH_ACTOR }}"
        password: "{{ DEPLOY_GH_TOKEN }}"
      run_once: true

    - name: Deploy new application to the TARGET slot '{{ DEPLOY_SLOT }}'
      ansible.builtin.import_role:
        name: deploy_app_slot

    - name: Stop and remove the PREVIOUS slot '{{ PREVIOUS_SLOT }}'
      community.docker.docker_container:
        name: "app_{{ DEPLOY_ENVIRONMENT }}_{{ PREVIOUS_SLOT }}"
        state: absent

    - name: Update color file to point to the new active slot for next deployment
      ansible.builtin.copy:
        content: "{{ DEPLOY_SLOT }}"
        dest: "{{ infra_root }}/.next_color_{{ DEPLOY_ENVIRONMENT }}"
        mode: '0644'
      become: yes

    - name: Print deployment summary
      ansible.builtin.debug:
        msg: "âœ… Deploy for ENV [{{ DEPLOY_ENVIRONMENT }}] successful. Active slot is now [{{ DEPLOY_SLOT }}] on host [{{ API_HOSTNAME }}]."
