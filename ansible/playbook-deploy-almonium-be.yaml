- name: Deploy Almonium BE Application (Blue/Green)
  hosts: "{{ target_host_group }}"
  gather_facts: false
  vars:
    infra_root: "/home/almonium/infra"
    project_name_base: "almonium-be"
    APP_INTERNAL_PORT: "9998"

  tasks:
    # --- Blue/Green Slot Determination ---
    - name: Determine which slot to deploy to
      block:
        - name: Read next deployment color for the environment
          ansible.builtin.slurp:
            src: "{{ infra_root }}/.next_color_{{ DEPLOY_ENVIRONMENT }}"
          register: color_file_content
          failed_when: false

        - name: Set deployment slots based on color file
          ansible.builtin.set_fact:
            # If file has 'green', deploy to 'blue'. Otherwise, default to 'blue'.
            DEPLOY_SLOT: "{{ 'blue' if (color_file_content.content | b64decode) == 'green' else 'green' }}"
            # The previous slot is the opposite of the new deployment slot.
            PREVIOUS_SLOT: "{{ 'green' if DEPLOY_SLOT == 'blue' else 'blue' }}"

    # --- Port and Project Name Configuration ---
    - name: Set dynamic configuration for the deployment
      ansible.builtin.set_fact:
        # Assign different healthcheck ports for staging/prod and blue/green to avoid conflicts.
        LOCAL_HEALTHCHECK_PORT: >-
          {{ {'staging': {'blue': '9978', 'green': '9979'},
              'production': {'blue': '9988', 'green': '9989'}}
              [DEPLOY_ENVIRONMENT][DEPLOY_SLOT] }}
        DOCKER_COMPOSE_PROJECT_NAME: "{{ project_name_base }}_{{ DEPLOY_ENVIRONMENT }}"

    # --- Deployment Execution ---
    - name: Log in to GitHub Container Registry (GHCR)
      community.docker.docker_login:
        registry: ghcr.io
        username: "{{ DEPLOY_GH_ACTOR }}"
        password: "{{ DEPLOY_GH_TOKEN }}"
      # This task runs only once, but its login state persists for the play.
      run_once: true

    - name: Deploy new application to the TARGET slot '{{ DEPLOY_SLOT }}'
      ansible.builtin.import_role:
        name: deploy_app_slot
      # The role will use all the facts we've set (DEPLOY_SLOT, LOCAL_HEALTHCHECK_PORT, etc.)

    # --- Cleanup and Finalization ---
    - name: Stop and remove the PREVIOUS slot '{{ PREVIOUS_SLOT }}'
      community.docker.docker_container:
        name: "app_{{ DEPLOY_ENVIRONMENT }}_{{ PREVIOUS_SLOT }}"
        state: absent
      # This module is idempotent and won't fail if the container doesn't exist.

    - name: Update color file to point to the new active slot
      ansible.builtin.copy:
        content: "{{ DEPLOY_SLOT }}"
        dest: "{{ infra_root }}/.next_color_{{ DEPLOY_ENVIRONMENT }}"
        mode: '0644'
      become: yes

    - name: Print deployment summary
      ansible.builtin.debug:
        msg: "âœ… Deploy for ENV [{{ DEPLOY_ENVIRONMENT }}] successful. Active slot is now [{{ DEPLOY_SLOT }}] on host [{{ API_HOSTNAME }}]."
