# ansible/playbook-deploy-almonium-be.yaml
- name: Deploy Almonium BE Application (Blue/Green with Ansible)
  hosts: "{{ target_host_group }}" # Passed from GH Actions: 'staging_vm' or 'production_vm'
  gather_facts: false
  vars:
    # These are all expected to be passed as --extra-vars from GitHub Actions
    # DEPLOY_IMAGE_TAG, DEPLOY_ENVIRONMENT, API_HOSTNAME
    # All CONF_* variables

    infra_root: "/home/almonium/infra" # Base directory on server
    project_name_base: "almonium-be"
    app_internal_port: "9998"

  tasks:
    - name: Determine project name suffix and color file path
      set_fact:
        project_name_suffix: "_{{ DEPLOY_ENVIRONMENT }}"
        color_file_path: "{{ infra_root }}/.next_color_{{ DEPLOY_ENVIRONMENT }}"

    - name: Read current color for the environment
      ansible.builtin.slurp:
        src: "{{ color_file_path }}"
      register: color_file_content
      failed_when: false # Don't fail if file not found, just register a miss

    - name: "Determine initial color based on file content (Step 1)"
      ansible.builtin.set_fact:
        # If slurp failed (file not found, so color_file_content.content is not defined)
        # or content is empty, default _color_from_file to 'blue'.
        # Otherwise, use the decoded content.
        _color_from_file: >-
          {{ color_file_content.content | b64decode
             if color_file_content.content is defined and color_file_content.content != ""
             else 'blue' }}

    - name: "Set target DEPLOY_SLOT and PREVIOUS_SLOT (Step 2)"
      ansible.builtin.set_fact:
        # Now _color_from_file is definitely defined from the previous task
        DEPLOY_SLOT: "{{ 'green' if _color_from_file == 'green' else 'blue' }}"
        PREVIOUS_SLOT: "{{ 'green' if DEPLOY_SLOT == 'blue' else 'blue' }}" # This relies on DEPLOY_SLOT from this same task, may need further split or careful ordering

    # To be absolutely safe with PREVIOUS_SLOT if it depends on the DEPLOY_SLOT set in the *same* task:
    # It's better to set PREVIOUS_SLOT based on the _color_from_file as well, or in a subsequent task.
    # Let's refine the previous task for clarity and safety:

    # --- REVISED SLOT DETERMINATION ---
    - name: "Set target DEPLOY_SLOT"
      ansible.builtin.set_fact:
        DEPLOY_SLOT: "{{ 'green' if _color_from_file == 'green' else 'blue' }}"

    - name: "Set PREVIOUS_SLOT based on determined DEPLOY_SLOT"
      ansible.builtin.set_fact:
        PREVIOUS_SLOT: "{{ 'green' if DEPLOY_SLOT == 'blue' else 'blue' }}"
    # --- END REVISED SLOT DETERMINATION ---

    - name: Set local healthcheck port for target DEPLOY_SLOT
      set_fact:
        LOCAL_HEALTHCHECK_PORT: >-
          {{ (DEPLOY_ENVIRONMENT == 'staging') | ternary(
               (DEPLOY_SLOT == 'blue' | ternary('9978', '9979')),
               (DEPLOY_SLOT == 'blue' | ternary('9988', '9989'))
             ) }}

    - name: Set Docker Compose project name base for environment
      set_fact:
        DOCKER_COMPOSE_PROJECT_NAME_ENV_BASE: "{{ project_name_base }}{{ project_name_suffix }}" # e.g., almonium-be_staging

    - name: "Deploy TARGET slot (DEBUGGING NAME)"
      ansible.builtin.include_role:
        name: deploy_app_slot
      vars:
        # Pass all necessary variables to the role for the TARGET slot
        DEPLOY_SLOT: "{{ DEPLOY_SLOT }}" # e.g., blue
        LOCAL_HEALTHCHECK_PORT: "{{ LOCAL_HEALTHCHECK_PORT }}"
        DOCKER_COMPOSE_PROJECT_NAME: "{{ DOCKER_COMPOSE_PROJECT_NAME_ENV_BASE }}" # e.g. almonium-be_staging
        # Pass through all variables received from GitHub Actions
        DEPLOY_IMAGE_TAG: "{{ DEPLOY_IMAGE_TAG }}"
        DEPLOY_ENVIRONMENT: "{{ DEPLOY_ENVIRONMENT }}"
        API_HOSTNAME: "{{ API_HOSTNAME }}"
        APP_INTERNAL_PORT: "{{ app_internal_port }}"
        CONF_LOCAL_PORT: "{{ CONF_LOCAL_PORT }}"
        CONF_DEBUG_PORT: "{{ CONF_DEBUG_PORT }}"
        CONF_SPRING_PROFILE: "{{ CONF_SPRING_PROFILE }}"
        CONF_JWT_SECRET: "{{ CONF_JWT_SECRET }}"
        CONF_DB_NAME: "{{ CONF_DB_NAME }}"
        CONF_DB_HOST: "{{ CONF_DB_HOST }}"
        CONF_DB_PORT: "{{ CONF_DB_PORT }}"
        CONF_DB_SCHEMA: "{{ CONF_DB_SCHEMA }}"
        CONF_DB_USERNAME: "{{ CONF_DB_USERNAME }}"
        CONF_DB_PASSWORD: "{{ CONF_DB_PASSWORD }}"
        CONF_RAPID_API_KEY: "{{ CONF_RAPID_API_KEY }}"
        CONF_WORDNIK_KEY: "{{ CONF_WORDNIK_KEY }}"
        CONF_YANDEX_KEY: "{{ CONF_YANDEX_KEY }}"
        CONF_OPENAI_KEY: "{{ CONF_OPENAI_KEY }}"
        CONF_GEMINI_API_KEY: "{{ CONF_GEMINI_API_KEY }}"
        CONF_STRIPE_KEY: "{{ CONF_STRIPE_KEY }}"
        CONF_STRIPE_WEBHOOK_SECRET: "{{ CONF_STRIPE_WEBHOOK_SECRET }}"
        CONF_STREAM_KEY: "{{ CONF_STREAM_KEY }}"
        CONF_STREAM_SECRET: "{{ CONF_STREAM_SECRET }}"
        CONF_GOOGLE_PROJECT_ID: "{{ CONF_GOOGLE_PROJECT_ID }}"
        CONF_GOOGLE_SERVICE_ACCOUNT_KEY_BASE64: "{{ CONF_GOOGLE_SERVICE_ACCOUNT_KEY_BASE64 }}"
        CONF_FIREBASE_STORAGE_BUCKET: "{{ CONF_FIREBASE_STORAGE_BUCKET }}"
        CONF_GOOGLE_ID: "{{ CONF_GOOGLE_ID }}"
        CONF_GOOGLE_SECRET: "{{ CONF_GOOGLE_SECRET }}"
        CONF_FACEBOOK_ID: "{{ CONF_FACEBOOK_ID }}"
        CONF_FACEBOOK_SECRET: "{{ CONF_FACEBOOK_SECRET }}"
        CONF_APPLE_ID: "{{ CONF_APPLE_ID }}"
        CONF_APPLE_SECRET: "{{ CONF_APPLE_SECRET }}"
        CONF_RABBITMQ_HOST: "{{ CONF_RABBITMQ_HOST }}"
        CONF_RABBITMQ_PORT: "{{ CONF_RABBITMQ_PORT }}"
        CONF_RABBITMQ_USER: "{{ CONF_RABBITMQ_USER }}"
        CONF_RABBITMQ_PASS: "{{ CONF_RABBITMQ_PASS }}"
        CONF_MAIL_USERNAME: "{{ CONF_MAIL_USERNAME }}"
        CONF_MAIL_PASSWORD: "{{ CONF_MAIL_PASSWORD }}"

    - name: "Stop and remove PREVIOUS slot: {{ PREVIOUS_SLOT }}"
      ansible.builtin.command: >-
        docker stop app_{{ DEPLOY_ENVIRONMENT }}_{{ PREVIOUS_SLOT }} &&
        docker rm app_{{ DEPLOY_ENVIRONMENT }}_{{ PREVIOUS_SLOT }}
      register: stop_previous_result
      changed_when: "'Error: No such container' not in stop_previous_result.stderr and stop_previous_result.rc == 0"
      failed_when: false # Don't fail playbook if container doesn't exist or stop fails
      ignore_errors: true # Continue even if previous slot doesn't exist
      when: PREVIOUS_SLOT is defined and PREVIOUS_SLOT != ''

    - name: "Update color file to point to next slot: {{ PREVIOUS_SLOT }}"
      ansible.builtin.copy:
        content: "{{ PREVIOUS_SLOT }}" # The previous slot is now the next one to be deployed
        dest: "{{ color_file_path }}"
        mode: '0644'
      become: true # If almonium user doesn't own /home/almonium/infra

    - name: "Deployment Summary"
      ansible.builtin.debug:
        msg: "âœ… Deploy for ENV: [{{ DEPLOY_ENVIRONMENT }}], successfully switched to SLOT: [{{ DEPLOY_SLOT }}] for HOSTNAME: [{{ API_HOSTNAME }}]"
